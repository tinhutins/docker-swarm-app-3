name: ci-cd

on:
  push:
    branches:
      - "master"

env:
  APACHE_IMAGE_NAME: "hutinskit/apache2"
  APACHE_IMAGE_TAG: "v1.0.31"
  MEMCACHED_IMAGE_NAME: "hutinskit/memcached"
  MEMCACHED_IMAGE_TAG: "v1.0.56"
  PHP_IMAGE_NAME: "hutinskit/phpfpm"
  PHP_IMAGE_TAG: "v1.0.30"

jobs:
  check-image:
    runs-on: ubuntu-22.04
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Check Docker Image for apache2 and push it if doesn't exists
        id: apache2-step
        run: |

          # Check if the image exists
          if docker pull $APACHE_IMAGE_NAME:$APACHE_IMAGE_TAG; then
            echo "Apache2 image already exists, skipping new build and push"
          else
            echo "apache2_output=true" >> $GITHUB_OUTPUT
            # Perform additional steps if the image does not exist
          fi
      
      - name: Check Docker Image for memcached and push it if doesn't exists
        id: memcached-step
        run: |

          # Check if the image exists
          if docker pull $MEMCACHED_IMAGE_NAME:$MEMCACHED_IMAGE_TAG; then
            echo "Memcached image already exists, skipping new build and push"
          else
            echo "memcached_output=true" >> $GITHUB_OUTPUT
            # Perform additional steps if the image does not exist
          fi
      
#       - name: Display
#         run: echo "${{ steps.memcached-step.outputs.BUILD-IMAGE-MEMCACHED }}"

      - name: Check Docker Image for phpfpm and push it if doesn't exists
        id: php-step
        run: |

          # Check if the image exists
          if docker pull $PHP_IMAGE_NAME:$PHP_IMAGE_TAG; then
            echo "Phpfpm image already exists, skipping new build and push"
          else
             echo "php_output=true" >> $GITHUB_OUTPUT
            # Perform additional steps if the image does not exist
          fi
    
    outputs:
      apache2_output: ${{ steps.apache2-step.outputs.apache2_output }}
      memcached_output: ${{ steps.memcached-step.outputs.memcached_output }}
      php_output: ${{ steps.memcached-step.outputs.php_output }}
  

  build-image-apache2:
    needs: check-image
    if: ${{ needs.check-image.outputs.apache2_output == 'true' }}
    runs-on: ubuntu-22.04
    steps:
      # -
      #   name: Checkout
      #   uses: actions/checkout@v3
      -
        name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Build and push apache2
        uses: docker/build-push-action@v4
        with:
          context: .
          file: docker_images/Dockerfile-apache2
          push: true
          #tags: ${{ steps.meta.outputs.tags }}
          tags: ${{ env.APACHE_IMAGE_NAME }}:${{ env.APACHE_IMAGE_TAG }}
#     outputs:
#       result: ${{ job.status }}

  build-image-memcached:
    needs: check-image
    if: ${{ needs.check-image.outputs.memcached_output == 'true' }}
    runs-on: ubuntu-22.04
    steps:
      -
        name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2  
      -
        name: Build and push memcached
        uses: docker/build-push-action@v4
        with:
          context: .
          file: docker_images/Dockerfile-memcached
          push: true
          #tags: ${{ steps.meta.outputs.tags }}
          tags: ${{ env.MEMCACHED_IMAGE_NAME }}:${{ env.MEMCACHED_IMAGE_TAG }}
#     outputs:
#       result: ${{ job.status }}
  
  build-image-php:
    needs: check-image
    if: ${{ needs.check-image.outputs.php_output == 'true' }}
    runs-on: ubuntu-22.04
    steps: 
      -
        name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2       
      -
        name: Build and push php-fpm
        uses: docker/build-push-action@v4
        with:
          context: .
          file: docker_images/Dockerfile-phpfpm8.2
          push: true
          #tags: ${{ steps.meta.outputs.tags }}
          tags: ${{ env.PHP_IMAGE_NAME }}:${{ env.PHP_IMAGE_TAG }}
#     outputs:
#       result: ${{ job.status }}
      
     # - 
     #   name: create env file
     #   run: |
      #    touch .env
       #   echo DOCKER_IMAGE_TAG=${{ github.sha }} > .env
       #   pwd
       #   ls -laht
       #   cat .env
     # -
      #  name: copy .env file via ssh key
      #  uses: appleboy/scp-action@v0.1.4
       # with:
        #  host: 192.168.43.128
        #  username: root
        #  key: ${{ secrets.DOCKER_SSH_PRIVATE_KEY }}
        #  port: 22
         # source: ".env"
         # target: /root
       
  deploy:
    # needs:
    #   - build-image-apache2
    #   - build-image-memcached
    #   - build-image-php
    # if: |
    #   always() &&
    #   needs.build-image-apache2.result == 'success' ||
    #   needs.build-image-memcached.result == 'success' ||
    #   needs.build-image-php.result == 'success'
    runs-on: self-hosted
    steps:
     # -
      #  name: executing env parsing
       # uses: appleboy/ssh-action@v0.1.10
       # with:
        #  host: 192.168.43.128
        #  username: root
         # key: ${{ secrets.DOCKER_SSH_PRIVATE_KEY }}
         # port: 22
         # script: set -a && . .env && set +a
              
      -
        name: deploy to docker swarm third app - marker 
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: 10.100.0.44
          username: root
          key: ${{ secrets.DOCKER_SSH_PRIVATE_KEY }}
          port: 22
          script: |     
            git clone https://github.com/tinhutins/docker-swarm-app-3.git
            rsync -av docker-swarm-app-3/apache2/etc/ /var/containers/sites/test/apache/ro/
            rsync -av docker-swarm-app-3/test_site_intercom/ /var/containers/sites/test/apache/rw/test_site_intercom/
            cd docker-swarm-app-3/
            export APACHE_DOCKER_IMAGE_TAG=${{ env.APACHE_IMAGE_NAME }}:${{ env.APACHE_IMAGE_TAG }}
            export MEMCACHED_DOCKER_IMAGE_TAG=${{ env.MEMCACHED_IMAGE_NAME }}:${{ env.MEMCACHED_IMAGE_TAG }}
            export PHP_DOCKER_IMAGE_TAG=${{ env.PHP_IMAGE_NAME }}:${{ env.PHP_IMAGE_TAG }}
            docker-compose config | docker stack deploy -c docker-compose.yml markerstage-testsite
            cd ../ && rm -rf ~/docker-swarm-app-3/
  
      #-  
      # name: Deploy to Docker swarm
      # uses: wshihadeh/docker-deployment-action@v1
      # env:
       #   DOCKER_IMAGE_TAG: ${{ github.sha }}
      # with:
      #   remote_docker_host: root@192.168.43.128
      #   ssh_private_key: ${{ secrets.DOCKER_SSH_PRIVATE_KEY }}
      #   ssh_public_key: ${{ secrets.DOCKER_SSH_PUBLIC_KEY }}
       #  deployment_mode: docker-swarm
        # pre_deployment_command_args: set -a && . .env && set +a && export 
        # copy_stack_file: true
        # deploy_path: ./
        # stack_file_name: docker-compose.yaml
        # keep_files: 4
        # args: my-app
